Resources:
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  ecsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3BucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow  # Give access to write in the aux_bucket
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::${self:custom.auxBucket}/*
        - PolicyName: BatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow  # Give access to write in the aux_bucket
                Action:
                  - batch:*
                Resource:
                  - arn:aws:batch:eu-central-1:775255162681:job-definition/*
                  - arn:aws:batch:eu-central-1:775255162681:job-queue/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role




  ecsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ecsInstanceRole

  SlsComputeEnv: # Compute environment
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      ComputeEnvironmentName: ${self:custom.batch.compute_env}
      ComputeResources:
        MaxvCpus: 10
        MinvCpus: 0
        SecurityGroupIds: !Ref SecurityGroupIds
        InstanceRole: !GetAtt ecsInstanceProfile.Arn
        Subnets: !Ref SubnetIds
        Type: EC2
        InstanceTypes:
          - optimal
      State: ENABLED
  SlsJobQueue: # Job queue
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: ${self:custom.batch.job_queue}
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref SlsComputeEnv
      State: ENABLED
      Priority: 1
  StartJobDefinition: # Start Job Definition
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: ${self:custom.batch.job_definition_start}
      ContainerProperties:
        Memory: 528
        Vcpus: 2
        Image: !Ref EcrImageStart
  ProcessJobDefinition: # Process Job Definition
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: ${self:custom.batch.job_definition_process}
      ContainerProperties:
        Memory: 528
        Vcpus: 2
        Image: !Ref EcrImageProcess